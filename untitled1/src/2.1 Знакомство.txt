Добро пожаловать!

Java - это современный язык программирования высокого уровня, разработанный в начале 1990-х годов компанией Sun Microsystems и в настоящее время принадлежащий Oracle.

Java не зависит от платформы, а это значит, что вам нужно написать программу только один раз, чтобы иметь возможность запускать ее на нескольких различных платформах!
Java портативна, надежна и динамична, с возможностью соответствовать потребностям практически любого типа приложений.

Структура программы на Java

Традиционно первая программа в любом курсе - это код, выводящий на экран приветствие "Hello, World!".

Давайте сделаем это ;)

 

class MyClass {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
 

Выглядит довольно сложно, однако сейчас нет необходимости подробно разбираться с назначением каждой команды в этом коде. Отметим только самое важное.

Программа на Java - это совокупность объектов, которые взаимодействуют через вызов друг друга. Таким образом, на практике программа состоит из большого количества файлов с расширением .java, расположенных в каталоге программы.

Каждый файл представляет собой отдельный класс. Наименование класса должно начинаться с заглавной буквы и строго совпадать с названием файла.

Если посмотреть на пример выше, то, чтобы запустить его на компьютере, а не в песочнице Степик, нужно поместить код в файл с именем MyClass.java. Так как наша программа простая, она будет состоять всего из одного класса (файла). В больших проектах классов сотни и тысячи.

Давайте немного систематизируем. Чтобы терминология была более понятна, рассмотрим простой пример - автомобиль.

1. Класс.

В Java каждая исполняемая строка кода должна находиться внутри определённой группы команд, которая называется классом. Можно сказать, что класс - это шаблон, описывающий поведение объекта. В нашем примере мы назвали класс MyClass. Содержимое класса помещается внутри фигурных скобок {}.

В нашем примере с автомобилем класс - это чертёж, то есть, абстрактный образец, по которому можно собрать конкретный автомобиль.  

2. Метод.

Внутри класса у каждой программы есть точка входа, которой является метод, называющийся main. Содержимое метода также находится внутри фигурных скобок. В целом, фигурные скобки используются во многих языках програмирования для выделения групп команд, функций или методов. Такое выделение может показаться неудобным (особенно тем, кто программирует на Python или подобных языках), однако в реальной разработке может быть гораздо функциональнее, чем другие способы выделения. 

Методы описывают поведение объекта внутри класса. Класс может содержать несколько методов, но главный метод main - обязательно..

В нашем примере с автомобилем методы - это действия, которые может выполнять автомобиль, например "ехать вперёд", "открыть дверь", "включить габариты".

3. Объект.

Объект - это экземпляр класса. В нашем примере это готовый конкретный автомобиль. Подобно тому, как по одним и тем же чертежам может быть создано множество автомобилей, внутри класса может быть создано множество объектов класса.

4. Переменные экземпляра.

Переменные экземпляра - это уникальный набор характеристик объекта. Состояние объекта передаётся значениями переменных. Грубо говоря, конкретный автомобиль имеет цвет, размеры, грузоподъёмность, в данный момент времени может ехать, а может стоять и т.д.

 

На данном этапе этого достаточно, более подробно мы рассмотрим этот материал в следующих модулях.

Метод main

Чтобы наша программа заработала, метод main должен выглядеть в точности так:

public static void main(String[] args)
Вот значение ключевых слов, используемых в этом выражении. Для тех, кто только приступает к изучению программирования, нижеизложенное может показаться непонятным, в этом случае можно пока пропустить этот шаг.

public - это модификатор доступа, означающий, что ограничений на доступ к данному методу нет. В каждом исходном файле может быть только один метод с модификатором public.

static означает, что метод может работать без образования экземпляра класса. Например, если мы хотим посчитать высоту конкретного здания, то нам понадобится это здание (это и есть экземпляр класса), иначе будет нечего измерять. Если же требуется  вывести на печать фразу "Hello, World!", то ничего такого нам не потребуется.

void означает, что метод ничего не возвращает в результате работы. Обратите внимание, что "не возвращает" не значит, что "не выводит" или "ничего не делает"! 

main - это имя нашего метода.

Например, следующий код объявляет метод test, который ничего не возвращает и не имеет параметров:

void test()
Параметры метода объявляются в круглых скобках, следующих за именем метода.
Для main это массив строк, называемых args. Мы будем использовать его в нашем следующем уроке, так что не волнуйтесь, если вы не понимаете всего этого сейчас.

Вывод на консоль

Вывод на консоль в Java осуществляется командами 

System.out.println()
System.out.print()
Первая команда после вывода переносит курсор на следующую строку, а вторая нет. Обратите внимание, что команда начинается с большой буквы.

Теперь напишем содержание основного метода main нашей программы, которая должна печатать приветствие:

{
   System.out.println("Hello World!");
}
Разберём подробно.

println - метод, печатающий строку на экране. То, что нужно напечатать, заключается в круглые скобки, следующие после наименования метода.

System - это класс, а out - поток, используемые для доступа к методу println.

Каждая строка кода должна заканчиваться точкой с запятой, а весь код, заключённый в методе (или классе, или других структурах управления) всегда помещается внутрь фигурных скобок.

Да, синтаксис Java довольно строг и поначалу непонятен, однако именно эта строгость и последовательность даёт много преимуществ.

Итак, мы подробно разобрали код нашей первой программы-приветствия. Добро пожаловать в Java

Точка с запятой

Можно передать методу println любой другой текст в качестве параметра и вывести его на печать. Текст помещается в двойные кавычки. Например:

class MyClass {
    public static void main(String[] args) {
        System.out.println("Я изучаю Java!");
    }
}
выведет :

Я изучаю Java!
Можно выводить результат выражения, заключённого в скобки метода println. Выведем последовательно несколько слов:

System.out.println("Я" + "изучаю" + "Java"); //ЯизучаюJava
System.out.println("Я" + " " + "изучаю" + " " + "Java"); //Я изучаю Java
Чтобы текст не сливался, между словами необходимо вставлять пробелы, которые являются такими же символами, что и прочие.

Как уже было отмечено ранее, все операторы кода в обязательном порядке заканчиваются точкой с запятой. Если забыть хоть одну, программа выдаст ошибку(.

Однако важно помнить, что точка с запятой НЕ ставится после структур, помещённых в фигурные скобки. 