Логические операторы

Логические операторы используются для объединения нескольких условий.

Допустим, вы хотите, чтобы ваша программа выводила "Добро пожаловать!" только тогда, когда возраст человека больше 18 лет, а количество решёных задач больше 500.
Один из способов сделать это-использовать вложенные операторы if:

if (age > 18) {
    if (tasks > 500) {
        System.out.println("Добро пожаловать!");
    }
}
Однако, использование логического оператора "И" позволяет сделать код более коротким и читаемым. В Java логическое "И" - это оператор &&.

if (age > 18 && tasks > 500) {
    System.out.println("Добро пожаловать!");
}
В примере использованы два логических условия (age > 18  и tasks > 500), и вся логическая конструкция будет иметь значение true только в том случае, если каждое из условий будет иметь значение true. Если хотя бы одно из условий примет значение false, то и вся конструкция примет значение false.

Логическое ИЛИ, логическое НЕ

Наряду с логическим И также широко используется оператор логическое ИЛИ (||).

Этот оператор проверяет, верно ли какое-либо из условий.
Логическая конструкция  становится истинной, если хотя бы одно из условий имеет значение true.

int age = 25;
int tasks = 100;

if (age > 18 || tasks > 500) {
    System.out.println("Добро пожаловать!");
}
Этот код выведет на печать приветствие "Добро пожаловать!", так как одно из условий (age > 18) имеет значение true.

Логическое НЕ (!) используется для изменения логического состояния своего операнда. Если условие истинно, то логическое НЕ сделает его ложным (и наоборот). Мы уже сталкивались с примером использования логического НЕ как составной части оператора арифметического неравенства (!=).

int age = 25;

if (!(age > 17)) {
    System.out.println("Вы несовершеннолетний");
} else {
    System.out.println("Добро пожаловать!");
}
Обратите внимание: логическая конструкция НЕ (x > y) эквивалентна x <= y, то есть, знак неравенства меняется на противоположный, и, вдобавок, строгое неравенство превращается в нестрогое.

Очерёдность действий в логических выражениях

Обработка логических выражений производится в соответствии с законами математической (булевой) логики. 

1. Сначала выполняются действия в круглых скобках.

2. Затем выполняются операции логического отрицания (!)

3. Далее выполняются операции логического И (&&)

4. В последнюю очередь выполняются операции логического ИЛИ (||).

В том случае, если имеется несколько операций одной очерёдности, они исполняются слева направо. Отдельно нужно помнить, что математические операции и операции сравнения производятся ДО логических операций.

Рассмотрим пример:

boolean a = true;
boolean b = false;
int c = 30;
int q = 5;

boolean r = (a || b && c >= 25) || (c < 20 * q) && !(q == 5);
Как можно видеть, r представляет собой непонятную конструкцию, однако, всё не так плохо, как кажется, если воспользоваться вышеизложенными правилами.

1. Сначала выполняем операции в скобках. Выражений в скобках у нас три, значит, выполним их слева направо.

2. Выражение в первой паре скобок (a || b && c >= 25). Внутри него также несколько операций.

    а) выполняем оперцию сравнения c >= 25. Поскольку c == 30, то это true;

    б) выполняем логическое И: b && c >= 25. b == false, а c >= 25 - это true (см. п. 1а). Следовательно, b && c >= 25 - это false;

    в) выполняем логическое ИЛИ: a == true, b && c >= 25 - это false (см. п. 1б). Следовательно, (a || b && c >= 25) - это true.

Значение в первой паре скобок равно true.

2. Выражение по второй паре скобок (c < 20 * q). 

    а) выполняем арифметическую операцию 20 * q ==100;

    б) выполняем сравнение c < 100 - это true.

Значение во второй паре скобок также true.

3. Выражение в третьей паре скобок (q == 5). Тут всё просто, это true.

Таким образом, обработав значения в скобках, мы преобразовали выражение в более простое:

boolean r = true || true && !true;
4. Следующие по очереди - операции отрицания. Она одна, выполним её:

boolean r = true || true && false;
5. Далее выполняем операцию логического И, true && false == false:

boolean r = true || false;
6. Ну и, наконец, получаем окончательный результат, выполнив последнюю оставшуюся операцию:

boolean r = true;
На практике следует избегать сложных логических конструкций, так как они очень сильно снижают понятность кода. Вы сами, вернувшись к собственной программе через год, потратите кучу времени для того, чтобы разобраться, как она работает.

